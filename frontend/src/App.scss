@import url(https://fonts.googleapis.com/css?family=Roboto:100,100italic,300,300italic,regular,italic,500,500italic,700,700italic,900,900italic);
@import './styles/variables.scss';

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

a {
  color: inherit;
}

html {
  margin-right: calc(-1 * (100vw - 100%));
  overflow-x: hidden;
}

@media (max-width: 1200px) {
  html {
    overflow-x: auto;
  }
}

body {
  font-family: 'Roboto';
  color: $font-color;
  background: url('./Frame 4.1.jpg');
  overflow-y: auto;
  min-width: 1200px;
  position: relative;
}
.body{
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  height: 3000px;
}

.main{
  flex:100%;
}
img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

.container {
  max-width: 1300px;
  margin: 0 auto;
  padding: 0 20px;
}

.field__name {
  margin-bottom: 7px;
  font-size: 20px;
  font-weight: 500;
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  /* display: none; <- Crashes Chrome on hover */
  -webkit-appearance: none;
  margin: 0;
  /* <-- Apparently some margin are still there even though it's hidden */
}

input[type='number'] {
  -moz-appearance: textfield;
}

.field {
  margin-bottom: 15px;
}

.input {
  position: relative;
  width: 100%;
  border-radius: 10px;
  border: 2px solid $bright;
  padding: 8px;
  font-size: 18px;
  background: $dark;
  color: inherit;
  z-index: 1;

  &:focus {
    outline: none;
    box-shadow: 0px 0px 8px 1px $bright;
  }

  &::placeholder {
    color: $grey;
  }

  &.input-error {
    border: 2px solid $error;
    outline-color: $error;
    box-shadow: 0px 0px 9px 2px $error;
  }
}

.input-wrapper {
  width: 100%;
  position: relative;
}

.show-password {
  z-index: 2;
  position: absolute;
  top: 5px;
  right: 4px;
  background: transparent;
  border: none;
  padding: 3px 3px 0 3px;

  &.hide::before {
    position: absolute;
    top: 13px;
    left: 5px;
    display: inline-block;
    content: '';
    width: 21px;
    height: 2px;
    background: $font-color;
    transform: rotate(45deg);
  }
}

.tip {
  position: relative;
  max-height: 0;
  opacity: 0;
  padding-top: 5px;
  max-width: 350px;
  color: $bright;
  font-weight: 500;
  transition: 0.8s;
  z-index: 0;
}

.input:focus~.tip {
  max-height: 200px;
  opacity: 1;
  transition: 0.8s;
}

.button {
  background: $bright;
  color: $font-color;
  font-weight: 700;
  font-size: 18px;
  min-width: 226px;
  border-radius: 10px;
  border: 2px solid $bright;
  padding: 8px 20px;
  transition: 0.3s;

  &.btn-full {
    width: 100%;
  }

  &:hover {
    transition: 0.3s;
    cursor: pointer;
    box-shadow: 0px 0px 8px 1px $bright;
    transform: translateY(-3px);
  }

  &:active {
    transform: scale(0.9);
    transition: 0.3s;
  }

  &:disabled {
    background: $grey;
    cursor: initial;
    color: $font-color;
    border: 1px solid $grey;
  }

  &:disabled:hover {
    box-shadow: none;
    transform: none;
  }
}

.error {
  min-width: 300px;
  background: $error;
  padding: 10px;
  color: inherit;
  border-radius: 5px;
  margin: 8px 0;
}

.title {
  margin-bottom: 20px;
  text-align: center;
}

.checkbox {
  position: relative;
  font-size: 18px;
  font-weight: 500;
  display: flex;
  align-items: center;
  padding-left: 30px;
  margin-bottom: 10px;

  a {
    margin-left: 5px;
  }

  &::after {
    position: absolute;
    left: 0;
    content: '';
    display: block;
    width: 15px;
    height: 15px;
    border: 2px solid $bright;
  }
}

.checkbox__field {
  position: absolute;
  visibility: hidden;

  &:checked~.checkbox::before {
    left: 0px;
    top: -3px;
    position: absolute;
    content: '';
    display: block;
    width: 15px;
    height: 20px;
    background: url('./utils/img/tick.svg');
  }

  &.checkbox-error~.checkbox::after {
    border: 1px solid $error-bright;
  }

  &.checkbox-error~.checkbox {
    color: $error-bright;
  }
}

.confirm__success {
  min-width: 300px;
  background: $succes;
  padding: 10px;
  color: $font-color;
  border-radius: 5px;
  margin: 8px 0;
}

/* For future usage
 .main-block {
  height: calc(100vh - 60px);
} */

.link-success {
  font-size: 18px;
}

.form-body {
  background: $semi-dark;
  border-radius: 20px;
  padding: 35px;
  min-width: 450px;
  max-width: 30%;
  height: fit-content;
}

.row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 15px;
}


body #bmc-wbtn {
  left: 20px;
  width: 50px !important;
  height: 50px !important;
  position: absolute !important;
  bottom: 35px !important;
}

body > div:nth-of-type(2) {
  position: absolute !important;
}

body #bmc-iframe {
  position: absolute !important;
  left: 45px;
  bottom: 85px !important;
  transform-origin: left bottom !important;
  height: 400px !important;
  min-height: 0 !important;
}
.search-field .input,
.search-field .react-select__control,
.search-city .react-select__control {
    background: $main;
    font-size: 18px;
}

.search-field .react-select__control {
    min-width: 320px;
    border-radius: 10px;
    border: 2px solid $bright;
    padding-top: 2px;
    padding-bottom: 1px;
}

.field.error-select .react-select__control {
    border: 2px solid $error;
    outline-color: $error;
    box-shadow: 0px 0px 9px 2px $error;
}

.search-field .react-select__control:hover,
.search-city .react-select__control:hover {
    border: 2px solid $bright;
}

.search-field .react-select__control--is-focused,
.search-city .react-select__control--is-focused {
    box-shadow: 0px 0px 8px 1px $bright;
}

.search-field .react-select__input-container,
.search-city .react-select__input-container {
    color: $font-color;
}

.search-field .react-select__indicator,
.search-field .react-select__indicator-separator,
.search-city .react-select__indicator,
.search-city .react-select__indicator-separator {
    display: none;
}

.search-field .react-select__menu,
.search-city .react-select__menu {
    background: $main;
}

.search-field .react-select__option,
.search-city .react-select__option {
    color: $font-color;
}

.search-field .react-select__option--is-selected,
.search-city .react-select__option--is-selected {
    background: inherit;
}

.search-field .react-select__single-value,
.search-city .react-select__single-value {
    color: $font-color;
}

.search-field .react-select__option--is-focused,
.search-city .react-select__option--is-focused {
    background: $dark;
}